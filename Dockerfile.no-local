# Stage 1: This is where we will build the jar directly within a docker container.
FROM eclipse-temurin:21.0.8_9-jdk AS builder
WORKDIR /app
# Copy gradle wrapper and build files.
COPY gradlew ./
COPY gradle ./gradle
COPY build.gradle.kts ./
COPY settings.gradle.kts ./
# Running gradlew before src added for caching layer.
RUN ./gradlew clean build --no-daemon --dry-run
# Copy src from local repo.
COPY ./src ./src
# Build jar file.
RUN ./gradlew clean assemble --no-daemon --info

# Stage 2: This step will make sure the image has not been tampered with and is legitimate. (optional)
FROM ghcr.io/sigstore/cosign/cosign:v2.4.1 AS cosign-bin
FROM alpine:3.22 AS verifier
COPY --from=cosign-bin /ko-app/cosign /usr/local/bin/cosign
RUN cosign verify gcr.io/distroless/java21-debian12:nonroot \
    --certificate-oidc-issuer https://accounts.google.com \
    --certificate-identity keyless@distroless.iam.gserviceaccount.com \
    && echo "VERIFIED" > /tmp/trigger \
    || (echo "VERIFICATION FAILED" > /tmp/trigger && exit 1)


# Stage 3: This is the image that will be created, will be using a distroless base image.
FROM gcr.io/distroless/java21-debian12:nonroot AS runner
WORKDIR /app
# This step is to force Stage 2 to run, nothing is actually copied to this image/container.
COPY --from=verifier /tmp/trigger /dev/null
COPY --from=builder /app/build/libs/*.jar ./user-management-api.jar
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "user-management-api.jar"]


